// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alt-research/avs/legacy/operator (interfaces: AggregatorRpcClienter)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/rpc_client.go -package=mocks github.com/alt-research/avs/legacy/operator AggregatorRpcClienter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	alert "github.com/alt-research/avs/legacy/core/alert"
	message "github.com/alt-research/avs/legacy/core/message"
	gomock "go.uber.org/mock/gomock"
)

// MockAggregatorRpcClienter is a mock of AggregatorRpcClienter interface.
type MockAggregatorRpcClienter struct {
	ctrl     *gomock.Controller
	recorder *MockAggregatorRpcClienterMockRecorder
}

// MockAggregatorRpcClienterMockRecorder is the mock recorder for MockAggregatorRpcClienter.
type MockAggregatorRpcClienterMockRecorder struct {
	mock *MockAggregatorRpcClienter
}

// NewMockAggregatorRpcClienter creates a new mock instance.
func NewMockAggregatorRpcClienter(ctrl *gomock.Controller) *MockAggregatorRpcClienter {
	mock := &MockAggregatorRpcClienter{ctrl: ctrl}
	mock.recorder = &MockAggregatorRpcClienterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAggregatorRpcClienter) EXPECT() *MockAggregatorRpcClienterMockRecorder {
	return m.recorder
}

// CreateAlertTaskToAggregator mocks base method.
func (m *MockAggregatorRpcClienter) CreateAlertTaskToAggregator(arg0 [32]byte) (*message.AlertTaskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlertTaskToAggregator", arg0)
	ret0, _ := ret[0].(*message.AlertTaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlertTaskToAggregator indicates an expected call of CreateAlertTaskToAggregator.
func (mr *MockAggregatorRpcClienterMockRecorder) CreateAlertTaskToAggregator(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlertTaskToAggregator", reflect.TypeOf((*MockAggregatorRpcClienter)(nil).CreateAlertTaskToAggregator), arg0)
}

// SendSignedTaskResponseToAggregator mocks base method.
func (m *MockAggregatorRpcClienter) SendSignedTaskResponseToAggregator(arg0 *message.SignedTaskRespRequest, arg1 chan alert.AlertResponse) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendSignedTaskResponseToAggregator", arg0, arg1)
}

// SendSignedTaskResponseToAggregator indicates an expected call of SendSignedTaskResponseToAggregator.
func (mr *MockAggregatorRpcClienterMockRecorder) SendSignedTaskResponseToAggregator(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSignedTaskResponseToAggregator", reflect.TypeOf((*MockAggregatorRpcClienter)(nil).SendSignedTaskResponseToAggregator), arg0, arg1)
}
